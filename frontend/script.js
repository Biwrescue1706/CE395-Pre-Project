const API_URL = "https://ce395backend.loca.lt/latest"; // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå
const ASK_AI_URL = "https://ce395backend.loca.lt/ask-ai"; // ‡∏ñ‡∏≤‡∏° AI ‡∏ú‡πà‡∏≤‡∏ô backend

async function fetchSensorData() {
  try {
    const response = await fetch(API_URL);
    const data = await response.json();

    const { light, temp, humidity } = data;

    document.getElementById("light").textContent = light;
    document.getElementById("temp").textContent = temp;
    document.getElementById("humidity").textContent = humidity;

    const now = new Date();
    const thaiDate = getThaiDateParts(now);
    document.getElementById("datestamp").textContent = `${thaiDate.dayOfWeek}‡∏ó‡∏µ‡πà ${thaiDate.day} ${thaiDate.month} ‡∏û.‡∏®. ${thaiDate.year}`;
    document.getElementById("timestamp").textContent = `${thaiDate.time} ‡∏ô.`;

    document.getElementById("light-status").textContent = getLightStatusText(light);
    document.getElementById("temp-status").textContent = getTempStatusText(temp);
    document.getElementById("humidity-status").textContent = getHumidityStatusText(humidity);

    document.getElementById("ai-suggestion").textContent = getAISuggestion(light, temp, humidity);

    applyStatusColor("light-box", getLightClass(light));
    applyStatusColor("temp-box", getTempClass(temp));
    applyStatusColor("humidity-box", getHumidityClass(humidity));
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:", error);
  }
}

function getThaiDateParts(date) {
  const optionsDate = { weekday: "long", day: "numeric", month: "long", year: "numeric" };
  const optionsTime = { hour: "2-digit", minute: "2-digit", second: "2-digit", hour12: false };
  const thDateFormatter = new Intl.DateTimeFormat("th-TH", optionsDate);
  const thTimeFormatter = new Intl.DateTimeFormat("th-TH", optionsTime);
  const parts = thDateFormatter.formatToParts(date);
  const time = thTimeFormatter.format(date);
  return {
    dayOfWeek: parts.find(p => p.type === "weekday")?.value ?? "",
    day: parts.find(p => p.type === "day")?.value ?? "",
    month: parts.find(p => p.type === "month")?.value ?? "",
    year: parts.find(p => p.type === "year")?.value ?? "",
    time,
  };
}

function getLightStatusText(light) {
  if (light > 50000) return "‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤ ‚òÄÔ∏è";
  if (light > 10000) return "‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô üå§";
  if (light > 5000) return "‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏° üå•";
  if (light > 1000) return "‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ üåà";
  if (light > 500) return "‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ üí°";
  if (light > 100) return "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÑ‡∏ü‡∏ö‡πâ‡∏≤‡∏ô üåô";
  if (light > 10) return "‡πÑ‡∏ü‡∏™‡∏•‡∏±‡∏ß üåë";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å‡πÜ üï≥Ô∏è";
}

function getTempStatusText(temp) {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‚ö†Ô∏è";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô üî•";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ üåû";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ üå§";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô ‚ùÑÔ∏è";
}

function getHumidityStatusText(humidity) {
  if (humidity > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î ‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏∞‡πÄ‡∏´‡∏¢ üåßÔ∏è";
  if (humidity > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏î‡∏µ üí¶";
  if (humidity > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏ö‡∏≠‡πâ‡∏≤‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ üå´Ô∏è";
  if (humidity > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‚úÖ";
  if (humidity > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á ‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏´‡πâ‡∏á‡πÑ‡∏î‡πâ üí®";
  if (humidity > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å ‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á ‡∏õ‡∏≤‡∏Å‡πÅ‡∏´‡πâ‡∏á ‡∏£‡∏∞‡∏Ñ‡∏≤‡∏¢‡∏à‡∏°‡∏π‡∏Å ü•µ";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";
}

function getAISuggestion(light, temp, humidity) {
  if (light < 5000 && humidity > 80) return "üåßÔ∏è ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ù‡∏ô‡∏ï‡∏Å‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢!";
  if (temp > 35 && humidity < 50) return "üî• ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏à‡∏±‡∏î ‡∏Ñ‡∏ß‡∏£‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥‡πÅ‡∏•‡∏∞‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡πÅ‡∏î‡∏î!";
  if (temp >= 30 && humidity > 70) return "üí¶ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô‡∏ä‡∏∑‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß!";
  if (temp >= 25 && humidity >= 40 && light > 10000) return "üå§ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡∏ô‡πà‡∏≤‡∏≠‡∏≠‡∏Å‡πÑ‡∏õ‡πÄ‡∏î‡∏¥‡∏ô‡πÄ‡∏•‡πà‡∏ô!";
  if (temp < 20) return "‚ùÑÔ∏è ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÄ‡∏¢‡πá‡∏ô‡∏™‡∏ö‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏™‡πà‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏Å‡∏±‡∏ô‡∏´‡∏ô‡∏≤‡∏ß‡∏ö‡∏≤‡∏á‡πÜ";
  return "‚úÖ ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏ô‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏™‡∏ö‡∏≤‡∏¢!";
}

function getLightClass(light) {
  if (light > 50000) return "light-very-bright";
  if (light > 10000) return "light-bright";
  if (light > 5000) return "light-cloudy";
  if (light > 1000) return "light-natural";
  if (light > 500) return "light-office";
  if (light > 100) return "light-room";
  if (light > 10) return "light-dim";
  return "light-dark";
}

function getTempClass(temp) {
  if (temp > 30) return "temp-very-hot";
  if (temp > 25) return "temp-hot";
  if (temp > 20) return "temp-warm";
  if (temp > 15) return "temp-cool";
  return "temp-very-cold";
}

function getHumidityClass(humidity) {
  if (humidity > 70) return "humidity-level-7";
  if (humidity > 60) return "humidity-level-6";
  if (humidity > 50) return "humidity-level-5";
  if (humidity > 40) return "humidity-level-4";
  if (humidity > 30) return "humidity-level-3";
  if (humidity > 20) return "humidity-level-2";
  return "humidity-level-1";
}

function applyStatusColor(id, className) {
  const el = document.getElementById(id);
  el.className = "";
  if (className) el.classList.add(className);
}

/* ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ñ‡∏≤‡∏° AI ‡∏ú‡πà‡∏≤‡∏ô backend */
async function askAI() {
  const question = document.getElementById("user-question").value.trim();
  if (!question) {
    document.getElementById("ai-answer").textContent = "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö";
    return;
  }

  try {
    document.getElementById("ai-answer").textContent = "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI...";
    const response = await fetch(ASK_AI_URL, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ question })
    });
    const data = await response.json();
    document.getElementById("ai-answer").textContent = data.answer || "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI";
  } catch (error) {
    console.error(error);
    document.getElementById("ai-answer").textContent = "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI ‡πÑ‡∏î‡πâ";
  }
}

/* ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å 1 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ */
fetchSensorData();
setInterval(fetchSensorData, 1000);
