require("dotenv").config();
import express, { Request, Response } from "express";
import axios, { AxiosError } from "axios";
import bodyParser from "body-parser";
import cors from "cors";

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());

const LINE_ACCESS_TOKEN: string = process.env.LINE_ACCESS_TOKEN || "";
const LINE_GROUP_ID: string = process.env.LINE_GROUP_ID || "";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Line ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
async function sendLineNotification(light: number, temp: number, humidity: number): Promise<void> {
    let lightStatus = "";
    let tempStatus = "";
    let humidityStatus = "";

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á
    if (light > 5000) {
        lightStatus = "‡πÅ‡∏™‡∏á‡∏™‡∏π‡∏á ‚òÄÔ∏è";
    } else if (light < 1000) {
        lightStatus = "‡πÅ‡∏™‡∏á‡∏ï‡πà‡∏≥ üåë";
    } else {
        lightStatus = "‡πÅ‡∏™‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ üå§";
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
    if (temp > 35) {
        tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á (‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏£‡πâ‡∏≠‡∏ô) üî•";
    } else if (temp < 20) {
        tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏ï‡πà‡∏≥ ‚ùÑÔ∏è";
    } else {
        tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏õ‡∏Å‡∏ï‡∏¥ üå°";
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
    if (humidity > 80) {
        humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ù‡∏ô‡∏ï‡∏Å üåß";
    } else if (humidity < 30) {
        humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥ üí®";
    } else {
        humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ üíß";
    }

    const message = `‚ö† ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‚ö†
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${new Date().toLocaleString()} ‡∏ô.
‚òÄ ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î: ${light} lux (${lightStatus})
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp}¬∞C (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}% (${humidityStatus})`;

    try {
        await axios.post("https://api.line.me/v2/bot/message/push", {
            to: LINE_GROUP_ID,
            messages: [{ type: "text", text: message }]
        }, { headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` } });

        console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!");
    } catch (error: unknown) {
        const axiosError = error as AxiosError;
        console.error("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", axiosError.response?.data || axiosError.message);
    }
}

// ‚úÖ Route ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å ESP32
app.post("/sensor-data", async (req: Request, res: Response) => {
    const { light, temp, humidity }: { light: number; temp: number; humidity: number } = req.body;

    if (light !== undefined && temp !== undefined && humidity !== undefined) {
        await sendLineNotification(light, temp, humidity);
        res.json({ message: "‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏•‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß!" });
    } else {
        res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
});

// ‚úÖ Start Server
app.listen(PORT, () => {
    console.log(`Server runnig on port http://localhost:${PORT}`);
  });