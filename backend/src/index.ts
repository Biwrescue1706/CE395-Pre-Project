require("dotenv").config();
import express, { Request, Response } from "express";
import axios from "axios";
import cors from "cors";
import bodyParser from "body-parser";
import { PrismaClient } from "@prisma/client";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

dayjs.extend(utc);
dayjs.extend(timezone);

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3000;
const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN || "";

app.use(cors());
app.use(bodyParser.json());

let lastSensorData: { light: number; temp: number; humidity: number } | null = null;

function cleanAIResponse(text: string): string {
  return text.replace(/<think>.*?<\/think>/, "").replace(/<[^>]+>/g, "").trim();
}

// ===== Helper =====
function getLightStatus(light: number): string {
  if (light > 50000) return "‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤ ‚òÄÔ∏è";
  if (light > 10000) return "‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô üå§";
  if (light > 5000) return "‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏° üå•";
  if (light > 1000) return "‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ üåà";
  if (light > 500) return "‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ üí°";
  if (light > 100) return "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÑ‡∏ü‡∏ö‡πâ‡∏≤‡∏ô üåô";
  if (light > 10) return "‡πÑ‡∏ü‡∏™‡∏•‡∏±‡∏ß üåë";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å‡πÜ üï≥Ô∏è";
}
function getTempStatus(temp: number): string {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‚ö†Ô∏è";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô üî•";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ üåû";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ üå§";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô ‚ùÑÔ∏è";
}
function getHumidityStatus(humidity: number): string {
  if (humidity > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î üåßÔ∏è";
  if (humidity > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß üí¶";
  if (humidity > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô üå´Ô∏è";
  if (humidity > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢ ‚úÖ";
  if (humidity > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á üí®";
  if (humidity > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å ü•µ";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";
}

// ===== LINE Reply =====
async function replyToUserAndDelete(id: number, replyToken: string, message: string) {
  try {
    const trimmedMessage = message.length > 4000 ? message.slice(0, 4000) + "\n...(‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)" : message;

    await axios.post("https://api.line.me/v2/bot/message/reply", {
      replyToken,
      messages: [{ type: "text", text: trimmedMessage }],
    }, {
      headers: {
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });

    await prisma.pendingReply.delete({ where: { id } });
    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE ‡πÅ‡∏•‡πâ‡∏ß:", trimmedMessage);
    console.log("‚úÖ ‡∏•‡∏ö replyToken:", id);
  } catch (err: any) {
    console.error("‚ùå LINE reply error:", err?.response?.data || err?.message);
  }
}

// ====== Ollama AI ======
async function askOllama(
  question: string,
  light: number,
  temp: number,
  humidity: number
): Promise<string> {
  const prompt = `‡πÅ‡∏™‡∏á: ${light} lux, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp}¬∞C, ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}%\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${question} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î`;

  try {
    console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI:", { question, prompt });

    const res = await axios.post("http://localhost:11434/api/generate", {
      model: "gemma:7b",
      prompt,
      system: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      stream: false
    });

    console.log("ü§ñ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:", res.data);
    return cleanAIResponse(res.data?.response || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ");
  } catch (err: any) {
    console.error("‚ùå AI Error:", err?.response?.data || err?.message || err);
    return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI";
  }
}

// ===== Webhook =====
app.post("/webhook", async (req: Request, res: Response) => {
  const events = req.body.events;

  for (const event of events) {
    const userId = event?.source?.userId;
    const replyToken = event?.replyToken;
    const text = event?.message?.text?.trim() || "";
    const messageType = event?.message?.type;

    console.log("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE:", {
      replyToken,
      userId,
      messageType,
      text
    });

    if (!userId) continue;

    const existingUser = await prisma.user.findUnique({ where: { userId } });
    if (!existingUser) {
      await prisma.user.create({ data: { userId } });
      console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userId ‡πÉ‡∏´‡∏°‡πà: ${userId}`);
    } else {
      console.log(`‚úÖ ‡∏°‡∏µ userId ‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${userId}`);
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ replyToken ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const exists = await prisma.pendingReply.findUnique({
      where: { replyToken }
    });
    if (exists) {
      console.log(`‚è≠Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏ã‡πâ‡∏≥ replyToken: ${replyToken}`);
      continue;
    } else {
      console.log(`‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ã‡πâ‡∏≥ replyToken: ${replyToken}`);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏á PendingReply
    const created = await prisma.pendingReply.create({
      data: { replyToken, userId, messageType, text }
    });
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PendingReply ID ${created.id}`);

    if (!lastSensorData) {
      await replyToUserAndDelete(created.id, replyToken, "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå");
      continue;
    }

    const { light, temp, humidity } = lastSensorData;
    const lightStatus = getLightStatus(light);
    const tempStatus = getTempStatus(temp);
    const humidityStatus = getHumidityStatus(humidity);

    if (messageType !== "text" || text.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")) {
      const msg = `üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î :
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})`;
      await replyToUserAndDelete(created.id, replyToken, msg);
      continue;
    }

    let replyText = "";

    if (text === "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
      replyText = `üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ :
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})
ü§ñ AI: ${await askOllama(text, light, temp, humidity)}`;
    } else if (text === "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏°") {
      replyText = `üìå ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏° :
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
ü§ñ AI: ${await askOllama(text, light, temp, humidity)}`;
    } else if (text === "‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏°") {
      replyText = `üìå ‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏° :
ü§ñ AI: ${await askOllama(text, light, temp, humidity)}`;
    } else if (text === "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
      replyText = `üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ :
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
ü§ñ AI: ${await askOllama(text, light, temp, humidity)}`;
    } else if (text === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
      replyText = `üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ :
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})
ü§ñ AI: ${await askOllama(text, light, temp, humidity)}`;
    } else {
      replyText = await askOllama(text, light, temp, humidity);
    }

    await replyToUserAndDelete(created.id, replyToken, replyText);
  }

  res.sendStatus(200);
});

// ===== ‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå ESP
app.post("/sensor-data", (req: Request, res: Response) => {
  const { light, temp, humidity } = req.body;
  if (light !== undefined && temp !== undefined && humidity !== undefined) {
    lastSensorData = { light, temp, humidity };
    res.json({ message: "‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß" });
  } else {
    res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  }
});

app.get("/latest", (req: Request, res: Response) => {
  if (lastSensorData) res.json(lastSensorData);
  else res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" });
});

// ===== AI ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
app.post("/ask-ai", async (req: Request, res: Response) => {
  const { question } = req.body;
  if (!question || !lastSensorData) {
    res.status(400).json({ error: "‚ùå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    return;
  }

  const { light, temp, humidity } = lastSensorData;
  const raw = await askOllama(question, light, temp, humidity);
  const cleaned = cleanAIResponse(raw);
  res.json({ answer: cleaned });
});

// ===== ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
setInterval(async () => {
  if (!lastSensorData) return;

  const { light, temp, humidity } = lastSensorData;
  const lightStatus = getLightStatus(light);
  const tempStatus = getTempStatus(temp);
  const humidityStatus = getHumidityStatus(humidity);

  // ‚ùó ‡∏£‡∏≠ AI ‡∏ï‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
  const rawAiAnswer = await askOllama("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", light, temp, humidity);
  const aiAnswer = cleanAIResponse(rawAiAnswer);

  // ‚úÖ ‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ì ‡∏Ç‡∏ì‡∏∞ "‡∏à‡∏∞‡∏™‡πà‡∏á‡∏à‡∏£‡∏¥‡∏á"
  const now = dayjs().tz("Asia/Bangkok");
  const buddhistYear = now.year() + 543;
  const thaiDays = ["‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå", "‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå"];
  const thaiMonths = [
    "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
    "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
  ];
  const dayName = thaiDays[now.day()];
  const monthName = thaiMonths[now.month()];
  const thaiDaysTime = `${dayName} ‡∏ó‡∏µ‡πà ${now.date()} ${monthName} ‡∏û.‡∏®.${buddhistYear} `;
  const thaiTimeTime = `${now.format("HH:mm")} ‡∏ô.`;

  const message = `üì° ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ :
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà : ${thaiDaysTime}
üïí ‡πÄ‡∏ß‡∏•‡∏≤ : ${thaiTimeTime}
üí° ‡πÅ‡∏™‡∏á : ${light} lux (${lightStatus})
üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ : ${temp} ¬∞C (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô : ${humidity} % (${humidityStatus})
ü§ñ AI : ${aiAnswer}`;

  const users = await prisma.user.findMany();
  for (const u of users) {
    await axios.post("https://api.line.me/v2/bot/message/push", {
      to: u.userId,
      messages: [{ type: "text", text: message }],
    }, {
      headers: {
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
  }

  console.log(`‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏ó‡∏¢ : ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ß‡∏±‡∏ô : ${thaiDaysTime} ‡πÄ‡∏ß‡∏•‡∏≤ : ${thaiTimeTime}`);
}, 10 * 60 * 1000);


// ===== Root
app.get("/", async (req: Request, res: Response) => {
  try {
    const sensor = await axios.get("http://localhost:3000/latest");
    const { light, temp, humidity } = sensor.data;
    const lightStatus = getLightStatus(light);
    const tempStatus = getTempStatus(temp);
    const humidityStatus = getHumidityStatus(humidity);
    res.send(`‚úÖ Backend is running <br>
      ‚úÖ Hello World!<br>
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux ( ${lightStatus} ) <br>
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C ( ${tempStatus} ) <br>
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % ( ${humidityStatus} )`);
  } catch {
    res.send(`‚úÖ Backend is running <br>
      ‚úÖ Hello World!`);
  }
});

// ===== Start Server
app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on http://localhost:${PORT}`);
});
