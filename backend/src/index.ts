require("dotenv").config();
import express, { Request, Response } from "express";
import axios from "axios";
import cors from "cors";
import bodyParser from "body-parser";
import { PrismaClient } from "@prisma/client";
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";

dayjs.extend(utc);
dayjs.extend(timezone);

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3000;
const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN || "";

app.use(cors());
app.use(express.json());
app.use(bodyParser.json());

let lastSensorData: { light: number; temp: number; humidity: number } | null = null;

// ===== Helper =====
function cleanAIResponse(text: string): string {
  return text.replace(/<think>.*?<\/think>/, "").replace(/<[^>]+>/g, "").trim();
}

//‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á
function getLightStatus(light: number): string {
  if (light > 50000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏à‡∏±‡∏î‡∏°‡∏≤‡∏Å";
  if (light > 10000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å";
  if (light > 5000) return "‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á";
  if (light > 1000) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á";
  if (light > 500) return "‡πÅ‡∏™‡∏á‡∏û‡∏≠‡πÉ‡∏ä‡πâ";
  if (light > 100) return "‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢";
  if (light > 10) return "‡∏°‡∏∑‡∏î‡∏™‡∏•‡∏±‡∏ß";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å";
}

//‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
function getTempStatus(temp: number): string {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô";
}

//‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
function getHumidityStatus(humidity: number): string {
  if (humidity > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î";
  if (humidity > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß";
  if (humidity > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô";
  if (humidity > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢";
  if (humidity > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á";
  if (humidity > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å";
}

// ====== AI ======
async function askOllama(question: string, light: number, temp: number, humidity: number): Promise<string> {
  const prompt = `
  ‡πÅ‡∏™‡∏á: ${light} lux, ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp}¬∞C, 
  ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity}%\n‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ${question} 
  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏†‡∏≤‡∏û ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö 
  ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡πâ‡∏≤‡∏°‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏´‡πâ‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡πÅ‡∏õ‡∏•‡∏Å‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏≠‡∏Å‡∏ô‡∏≠‡∏Å‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á`;

  try {
    console.log("üì§ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI:", { question }, " \n", { prompt });
    const res = await axios.post("http://localhost:11434/api/generate", {
      model: "gemma:7b",
      prompt,
      system: "‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏∑‡∏≠‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏ï‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
      stream: false
    });

    const cleaned = cleanAIResponse(res.data?.response || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ");
    console.log("ü§ñ AI ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏° ‡∏à‡∏≤‡∏Å :", question,"\nü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:", cleaned);

    return cleaned || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ";

  } catch (err: any) {
    console.error("‚ùå AI Error:", err?.response?.data || err?.message || err);
    return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI";
  }
}

// ===== LINE Reply =====
async function replyToUser(replyToken: string, message: string) {
  try {
    const trimmedMessage = message.length > 1000 ? message.slice(0, 1000) + "\n...(‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)" : message;
    await axios.post("https://api.line.me/v2/bot/message/reply", {
      replyToken,
      messages: [{ type: "text", text: trimmedMessage }],
    }, {
      headers: {
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
  } catch (err: any) {
    console.error("‚ùå LINE reply error:", err?.response?.data || err?.message);
  }
}

async function deletePendingReply(id: number) {
  try {
    await prisma.pendingReply.delete({ where: { id } });
  } catch (err: any) {
    console.error("‚ùå ‡∏•‡∏ö PendingReply ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", err?.response?.data || err?.message);
  }
}

// ===== Webhook =====
app.post("/webhook", async (req: Request, res: Response) => {
  res.sendStatus(200); // ‡∏ï‡∏≠‡∏ö LINE ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  const events = req.body.events || [];
  for (const event of events) {
    if (event?.type === "message" && event?.replyToken && event?.source?.userId) {
      processMessageEvent(event).catch(console.error);
    } else {
      console.log("‚ùé ‡∏Ç‡πâ‡∏≤‡∏° event:", event?.type);
    }
  }
});

async function processMessageEvent(event: any) {
  const userId = event?.source?.userId;
  const replyToken = event?.replyToken;
  const messageType = event.message?.type || "unknown";
  const text = messageType === "text" ? event.message.text.trim() : "";

  console.log("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å LINE:", {
    replyToken,
    userId,
    messageType,
    text
  });

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å User ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  const existingUser = await prisma.user.findUnique({ where: { userId } });
  if (!existingUser) {
    await prisma.user.create({ data: { userId } });
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å userId ‡πÉ‡∏´‡∏°‡πà: ${userId}`);
  } else {
    console.log(`‚úÖ userId ‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß: ${userId}`);
  }

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö replyToken ‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
  const exists = await prisma.pendingReply.findUnique({ where: { replyToken } });
  if (exists) {
    console.log(`‚è≠Ô∏è ‡∏ã‡πâ‡∏≥ replyToken: ${replyToken}`);
    return;
  }
  console.log(`‚úÖ ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ã‡πâ‡∏≥ replyToken: ${replyToken}`);

  // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PendingReply
  const created = await prisma.pendingReply.create({
    data: {
      replyToken,
      userId,
      messageType,
      text: text || "(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°)",
    },
  });

  console.log("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PendingReply:", created);

  if (!lastSensorData) {
    await replyToUser(replyToken, "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå");
    await deletePendingReply(created.id);
    return;
  }

  const { light, temp, humidity } = lastSensorData;
  const lightStatus = getLightStatus(light);
  const tempStatus = getTempStatus(temp);
  const humidityStatus = getHumidityStatus(humidity);

  const shortMsg = `üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î :
- ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})`;

  if (messageType !== "text" ||text.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ")) {
    await replyToUser(replyToken, shortMsg);
    console.log(`üì§ ‡∏™‡πà‡∏á AI ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á ${userId}`);
    await deletePendingReply(created.id); // ‚úÖ ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö
    return;
  }

  await replyToUser(replyToken, "‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ñ‡∏≤‡∏° AI...");

  let answer = "";
  if (text === "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
    answer = `‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ?
- ${shortMsg}
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å AI : ${await askOllama(text, light, temp, humidity)}`;
  } else if (text === "‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏°") {
    answer = `‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏°?
- ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å AI : ${await askOllama(text, light, temp, humidity)}`;
  } else if (text === "‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏°") {
    answer = `‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏°?
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å AI : ${await askOllama(text, light, temp, humidity)}`;
  } else if (text === "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
    answer = `‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ?
- ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å AI : ${await askOllama(text, light, temp, humidity)}`;
  } else if (text === "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£") {
    answer = `‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£ ?
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % 
- ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏à‡∏≤‡∏Å AI : ${await askOllama(text, light, temp, humidity)}`;
  } else {
    await replyToUser(replyToken, shortMsg);
    console.log(`üì§ ‡∏™‡πà‡∏á AI ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ñ‡∏∂‡∏á ${userId}`);
    await deletePendingReply(created.id); // ‚úÖ ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö
    return;
  }

  await axios.post("https://api.line.me/v2/bot/message/push", {
    to: userId,
    messages: [{ type: "text", text: answer }],
  }, {
    headers: {
      Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
      "Content-Type": "application/json",
    },
  });
  console.log(`üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° AI ‡∏ñ‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ${userId}`);
  await deletePendingReply(created.id); // ‚úÖ ‡∏•‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ï‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á
}

// ===== Sensor Data =====
app.post("/sensor-data", (req: Request, res: Response) => {
  const { light, temp, humidity } = req.body;
  if (light !== undefined && temp !== undefined && humidity !== undefined) {
    lastSensorData = { light, temp, humidity };
    res.json({ message: "‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß" });
  } else {
    res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  }
});

app.get("/latest", (req: Request, res: Response) => {
  if (lastSensorData) res.json(lastSensorData);
  else res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" });
});

// ===== AI from Web =====
app.post("/ask-ai", async (req: Request, res: Response) => {
  const { question } = req.body;
  if (!question || !lastSensorData) {
    res.status(400).json({ error: "‚ùå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    return;
  }

  const { light, temp, humidity } = lastSensorData;
  const raw = await askOllama(question, light, temp, humidity);
  const cleaned = cleanAIResponse(raw);
  res.json({ answer: cleaned });
});

// ===== Auto Report =====
// setInterval(async () => {
//   if (!lastSensorData) return;

//   const { light, temp, humidity } = lastSensorData;
//   const aiAnswer = cleanAIResponse(await askOllama("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", light, temp, humidity));
//   const now = dayjs().tz("Asia/Bangkok");
//   const buddhistYear = now.year() + 543;
//   const thaiMonths = ["‡∏°.‡∏Ñ.", "‡∏Å.‡∏û.", "‡∏°‡∏µ.‡∏Ñ.", "‡πÄ‡∏°.‡∏¢.", "‡∏û.‡∏Ñ.", "‡∏°‡∏¥.‡∏¢.", "‡∏Å.‡∏Ñ.", "‡∏™.‡∏Ñ.", "‡∏Å.‡∏¢.", "‡∏ï.‡∏Ñ.", "‡∏û.‡∏¢.", "‡∏ò.‡∏Ñ."];
//   const monthName = thaiMonths[now.month()];
//   const dateStr = `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ${now.date()} ${monthName} ‡∏û.‡∏®.${buddhistYear}`;
//   const timeStr = `${now.format("HH:mm")} ‡∏ô.`;

//   const message = `üì° ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ :
// üìÖ ${dateStr}
// üïí ${timeStr}
// üí° ‡πÅ‡∏™‡∏á : ${light} lux
// üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ : ${temp} ¬∞C
// üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô : ${humidity} %
// ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI : ${aiAnswer}`;

//   const users = await prisma.user.findMany();
//   for (const u of users) {
//     await axios.post("https://api.line.me/v2/bot/message/push", {
//       to: u.userId,
//       messages: [{ type: "text", text: message }],
//     }, {
//       headers: {
//         Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
//         "Content-Type": "application/json",
//       },
//     });
//   }

//   console.log(`‚úÖ ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡πà‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠ ${dateStr} ‡πÄ‡∏ß‡∏•‡∏≤ ${timeStr}`);
// }, 4 * 60 * 1000);


// ===== Root =====
app.get("/", async (req: Request, res: Response): Promise<void> => {
  if (!lastSensorData) {
    res.send("‚úÖ Backend is running<br>‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå");
    return
  }
  const { light, temp, humidity } = lastSensorData;
  res.send(`‚úÖ Backend is running <br>
üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${getLightStatus(light)})<br>
üå°Ô∏è ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${getTempStatus(temp)})<br>
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${getHumidityStatus(humidity)})`);
});

// ===== Start Server =====
app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on http://localhost:${PORT}`);
});
