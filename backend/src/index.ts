require("dotenv").config();
import express, { Request, Response } from "express";
import axios, { AxiosError } from "axios";
import bodyParser from "body-parser";
import cors from "cors";

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());  
app.use(bodyParser.json());

const LINE_ACCESS_TOKEN: string = process.env.LINE_ACCESS_TOKEN || "";
const LINE_GROUP_ID: string = process.env.LINE_GROUP_ID || "";

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
let lastSensorData: { light: number; temp: number; humidity: number } | null = null;

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function getThaiDateParts(date: Date) {
    const optionsDate: Intl.DateTimeFormatOptions = {
        weekday: "long",
        day: "numeric",
        month: "long",
        year: "numeric",
    };

    const optionsTime: Intl.DateTimeFormatOptions = {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
    };

    const thDateFormatter = new Intl.DateTimeFormat("th-TH", optionsDate);
    const thTimeFormatter = new Intl.DateTimeFormat("th-TH", optionsTime);

    const parts = thDateFormatter.formatToParts(date);
    const time = thTimeFormatter.format(date);

    const dayOfWeek = parts.find(p => p.type === "weekday")?.value ?? "";
    const day = parts.find(p => p.type === "day")?.value ?? "";
    const month = parts.find(p => p.type === "month")?.value ?? "";
    const year = parts.find(p => p.type === "year")?.value ?? "";

    return {
        dayOfWeek,
        day,
        month,
        year,
        time
    };
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
async function sendLineNotification(light: number, temp: number, humidity: number): Promise<void> {
    let lightStatus = "";
    let tempStatus = "";
    let humidityStatus = "";

    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
    if (light > 65535) lightStatus = "‡πÅ‡∏™‡∏á‡∏à‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÜ üåû";
    else if (light > 20000) lightStatus = "‡πÅ‡∏™‡∏á‡∏à‡πâ‡∏≤ üåû";
    else if (light > 5000) lightStatus = "‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‚òÄÔ∏è";
    else if (light > 1000) lightStatus = "‡πÅ‡∏™‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á üå§";
    else if (light > 50) lightStatus = "‡πÅ‡∏™‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ‚õÖ";
    else if (light > 20) lightStatus = "‡πÅ‡∏™‡∏á‡∏°‡∏∑‡∏î üåë";
    else if (light > 10) lightStatus = "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å üåë";
    else if (light > 5) lightStatus = "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å‡πÜ üåë";
    else lightStatus = "‡∏°‡∏∑‡∏î‡∏™‡∏ô‡∏¥‡∏ó";

    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
    if (temp > 35) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å ‚ö†Ô∏è";
    else if (temp >= 30) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô üî•";
    else if (temp >= 25) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ üåû";
    else if (temp >= 20) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ üå§";
    else tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô ‚ùÑÔ∏è";

    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
    if (humidity > 80) humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å üí¶";
    else if (humidity > 60) humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏™‡∏π‡∏á üåßÔ∏è";
    else if (humidity > 30) humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥ üå§Ô∏è";
    else if (humidity > 20) humidityStatus = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡πà‡∏≥ üåµ";
    else humidityStatus = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏ß‡πà‡∏≤‡∏ù‡∏ô‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let rainForecastStatus: string;
    if (humidity >= 80 && temp >= 24 && temp <= 32) {
        rainForecastStatus = "üåßÔ∏è ‡∏°‡∏µ‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ù‡∏ô‡∏ï‡∏Å";
    } else {
        rainForecastStatus = "‚òÄÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ù‡∏ô‡∏ï‡∏Å";
    }

    const now = new Date();
    const thaiDate = getThaiDateParts(now);
    const fullDateTime = `${thaiDate.dayOfWeek}‡∏ó‡∏µ‡πà ${thaiDate.day} ${thaiDate.month} ‡∏û.‡∏®. ${thaiDate.year} ‡πÄ‡∏ß‡∏•‡∏≤ ${thaiDate.time} ‡∏ô.`;

    const message = `‚ö† ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‚ö†
üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${fullDateTime}
‚òÄ ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î: ${light} lux (${lightStatus})
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})
üåßÔ∏è ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: ${rainForecastStatus}`;

    // try {
    //     const response = await axios.post(
    //         "https://api.line.me/v2/bot/message/push",
    //         {
    //             to: LINE_GROUP_ID,
    //             messages: [{ type: "text", text: message }],
    //         },
    //         {
    //             headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
    //         }
    //     );
    //     console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", response.data);
    // } catch (error: unknown) {
    //     const axiosError = error as AxiosError;
    //     console.error("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", axiosError.response?.data || axiosError.message);
    // }
}

// let lastAlertTime = 0;
// const ALERT_INTERVAL = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

// // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
// async function checkAndSendAlert() {
//     const currentTime = new Date().getTime();
//     if (currentTime - lastAlertTime >= ALERT_INTERVAL) {
//         if (lastSensorData) {
//             const { light, temp, humidity } = lastSensorData;
//             await sendLineNotification(light, temp, humidity);
//             lastAlertTime = currentTime;
//         }
//     }
// }

// setInterval(checkAndSendAlert, ALERT_INTERVAL);

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP32
app.post("/sensor-data", async (req: Request, res: Response) => {
    const { light, temp, humidity }: { light: number; temp: number; humidity: number } = req.body;

    if (light !== undefined && temp !== undefined && humidity !== undefined) {
        lastSensorData = { light, temp, humidity };
        res.json({ message: "‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß!" });
    } else {
        res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
app.get("/latest", (req: Request, res: Response) => {
    if (lastSensorData) {
        res.json(lastSensorData);
    } else {
        res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" });
    }
});

// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
