require("dotenv").config();

import express, { Request, Response } from "express";
import axios from "axios";
import cors from "cors";
import bodyParser from "body-parser";
import { PrismaClient } from "@prisma/client";

const app = express();
const prisma = new PrismaClient();
const PORT = process.env.PORT || 3001;

const LINE_ACCESS_TOKEN = process.env.LINE_ACCESS_TOKEN || "";
// const OPENAI_API_KEY = process.env.OPENAI_API_KEY || "";

app.use(cors());
app.use(bodyParser.json());

let lastSensorData: {
  light: number;
  temp: number;
  humidity: number
} | null = null;

// ===== Helper =====
function getLightStatus(light: number): string {
  if (light > 50000) return "‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤ ‚òÄÔ∏è";
  if (light > 10000) return "‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡∏°‡∏µ‡πÄ‡∏°‡∏Ü ‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô üå§";
  if (light > 5000) return "‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏° üå•";
  if (light > 1000) return "‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥ üåà";
  if (light > 500) return "‡∏≠‡∏≠‡∏ü‡∏ü‡∏¥‡∏® ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡πâ‡∏≤‡∏ô‡∏Ñ‡πâ‡∏≤ üí°";
  if (light > 100) return "‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏±‡πà‡∏á‡πÄ‡∏•‡πà‡∏ô ‡πÑ‡∏ü‡∏ö‡πâ‡∏≤‡∏ô üåô";
  if (light > 10) return "‡πÑ‡∏ü‡∏™‡∏•‡∏±‡∏ß üåë";
  return "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å‡πÜ üï≥Ô∏è";
}

function getTempStatus(temp: number): string {
  if (temp > 35) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‚ö†Ô∏è";
  if (temp >= 30) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô üî•";
  if (temp >= 25) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ üåû";
  if (temp >= 20) return "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ üå§";
  return "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô ‚ùÑÔ∏è";
}
function getHumidityStatus(humidity: number): string {
  if (humidity > 85) return "‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î üåßÔ∏è";
  if (humidity > 70) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß üí¶";
  if (humidity > 60) return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô üå´Ô∏è";
  if (humidity > 40) return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢ ‚úÖ";
  if (humidity > 30) return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á üí®";
  if (humidity > 20) return "‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å ü•µ";
  return "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";
}

// ===== LINE Reply =====
async function replyToUser(replyToken: string, message: string) {
  try {
    await axios.post("https://api.line.me/v2/bot/message/reply", {
      replyToken,
      messages: [{ type: "text", text: message }],
    }, {
      headers: {
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
    console.log("‚úÖ ‡∏™‡πà‡∏á‡∏ú‡πà‡∏≤‡∏ô Line ‡πÅ‡∏•‡πâ‡∏ß");
  } catch (err: any) {
    console.error("‚ùå LINE reply error:", err?.response?.data || err?.message);
  }
}

// ====== Ollama AI ======
async function askOllama(question: string,
  light: number,
  temp: number,
  humidity: number): Promise<string> {
  const systemPrompt = "‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡∏ú‡∏π‡πâ‡∏ä‡πà‡∏ß‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå";
  const userPrompt = `
‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå:
- ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux
- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} %
‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: "${question}"
‡∏ï‡∏≠‡∏ö‡∏™‡∏±‡πâ‡∏ô ‡πÜ ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢`;

  try {
    const response = await axios.post("http://localhost:11434/api/chat", {
      model: "llama3:70b-instruct-q3_K_S",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt },
      ],
      stream: false,
    });
    return response.data?.message?.content || "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏≠‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ";
  } catch (err) {
    console.error("‚ùå Ollama error:", err);
    return "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ AI";
  }
}

// ===== Webhook =====
app.post("/webhook", async (req: Request, res: Response) => {
  const events = req.body.events;

  for (const event of events) {
    const userId = event?.source?.userId;
    const replyToken = event?.replyToken;
    const messageType = event?.message?.type;
    const text = event?.message?.text?.trim();

    console.log("‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Line\n", {
      userId,
      messageType,
      text,
    });


    if (!userId || !replyToken || !lastSensorData) continue;

    const existingUser = await prisma.user.findUnique({
      where: { userId },
    });

    if (existingUser) {
      console.log(`‚ÑπÔ∏è    ‡∏°‡∏µ userId ‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß: ${userId}`);
    } else {
      await prisma.user.create({ data: { userId } });
      console.log(`‚úÖ ‡πÄ‡∏Å‡πá‡∏ö userId ‡πÉ‡∏´‡∏°‡πà: ${userId}`);
    }

    if (!lastSensorData) {
      await replyToUser(replyToken, "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå");
      continue;
    }

    const { light, temp, humidity } = lastSensorData;
    const lightStatus = getLightStatus(light);
    const tempStatus = getTempStatus(temp);
    const humidityStatus = getHumidityStatus(humidity);

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°

    if (messageType !== "text" || (!text)) {
      const msg = `üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
    - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
    - ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})`;
      await replyToUser(replyToken, msg);
      continue;
    }

    if (messageType === "text" || (text && text.includes("‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ"))) {
      const msg = `üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:
    - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
    - ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
    - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})`;
      await replyToUser(replyToken, msg);
      continue;
    }

    const aiAnswer = await askOllama(text, light, temp, humidity);

    let replyText = "";
    switch (text) {
      case "‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£":
        replyText = `
        üìä ‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n
        - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})\n
        - ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})\n
        - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})\n
        ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI: ${aiAnswer}`;
        break;
      case "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏°":
        replyText = `
        ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏≤‡∏Å‡∏ú‡πâ‡∏≤‡πÑ‡∏´‡∏°:\n
        - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})\n
        ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:\n${aiAnswer}`;
        break;
      case "‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡πâ‡∏≤‡∏ô‡πÑ‡∏´‡∏°":
        replyText = `‡∏Ñ‡∏ß‡∏£‡∏û‡∏Å‡∏£‡πà‡∏°‡πÑ‡∏´‡∏°:\nü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI:\n${aiAnswer}`;
        break;
      case "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£":
        replyText = `
        üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡πÅ‡∏™‡∏á:\n
        - ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})\n
        ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI: ${aiAnswer}`;
        break;
      case "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏£":
        replyText = `
        üìä ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î:\n
        - ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})\n
        ü§ñ ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å AI: ${aiAnswer}`;
        break;
      default:
        replyText = aiAnswer;
        break;
    }

  }
  res.sendStatus(200);
});

// ===== ESP32 ‡∏´‡∏£‡∏∑‡∏≠ ESP8266 Sensor Data =====
app.post("/sensor-data", (req: Request, res: Response) => {
  const { light, temp, humidity } = req.body;
  if (light !== undefined && temp !== undefined && humidity !== undefined) {
    lastSensorData = { light, temp, humidity };
    res.json({ message: "‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß" });
  } else {
    res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
  }
});

// ===== Get Latest Sensor Data =====
app.get("/latest", (req: Request, res: Response) => {
  if (lastSensorData) {
    res.json(lastSensorData);
  } else {
    res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" });
  }
});

// === ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ
setInterval(async () => {
  if (!lastSensorData) return;
  const { light, temp, humidity } = lastSensorData;
  const lightStatus = getLightStatus(light);
  const tempStatus = getTempStatus(temp);
  const humidityStatus = getHumidityStatus(humidity);
  const aiAnswer = await askOllama("‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏™‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ", light, temp, humidity);

  const message = `üì° ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥:
- ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux (${lightStatus})
- ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C (${tempStatus})
- ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % (${humidityStatus})
ü§ñ AI:
${aiAnswer}`;

  const users = await prisma.user.findMany();
  for (const u of users) {
    await axios.post("https://api.line.me/v2/bot/message/push", {
      to: u.userId,
      messages: [{ type: "text", text: message }],
    }, {
      headers: {
        Authorization: `Bearer ${LINE_ACCESS_TOKEN}`,
        "Content-Type": "application/json",
      },
    });
  }
}, 5 * 60 * 1000); // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

// === API: ‡∏ñ‡∏≤‡∏° AI ‡∏à‡∏≤‡∏Å frontend
app.post("/ask-ai", async (req: Request, res: Response): Promise<void> => {
  const { question } = req.body;
  if (!question || !lastSensorData) {
    res.status(400).json({ error: "‚ùå ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö" });
    return
  }

  const { light, temp, humidity } = lastSensorData;
  const answer = await askOllama(question, light, temp, humidity);
  res.json({ answer });
});

app.get("/", async (req: Request, res: Response) => {
  try {
    const sensor = await axios.get("https://ce395backend.loca.lt/latest");
    const { light, temp, humidity } = sensor.data;
    const lightStatus = getLightStatus(light);
    const tempStatus = getTempStatus(temp);
    const humidityStatus = getHumidityStatus(humidity);

    res.send(`
      ‚úÖ Hello World!<br>
      üí° ‡∏Ñ‡πà‡∏≤‡πÅ‡∏™‡∏á: ${light} lux ( ${lightStatus} ) <br>
      üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥: ${temp} ¬∞C ( ${tempStatus} ) <br>
      üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô: ${humidity} % ( ${humidityStatus} )
    `);
  } catch (err: any) {
    res.send(`
      ‚úÖ Hello World!
    `);
  }
});


// ===== Start Server =====
app.listen(PORT, () => {
  console.log(`‚úÖ Server is running on http://localhost:${PORT}`);
});