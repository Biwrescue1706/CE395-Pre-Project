require("dotenv").config();
import express, { Request, Response } from "express";
import axios, { AxiosError } from "axios";
import bodyParser from "body-parser";
import cors from "cors";

const app = express();
const PORT = process.env.PORT || 3000;

app.use(cors());
app.use(bodyParser.json());

const LINE_ACCESS_TOKEN: string = process.env.LINE_ACCESS_TOKEN || "";
const LINE_GROUP_ID: string = process.env.LINE_GROUP_ID || "";

// ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
let lastSensorData: { light: number; temp: number; humidity: number } | null = null;

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô/‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
function getThaiDateParts(date: Date) {
    const optionsDate: Intl.DateTimeFormatOptions = {
        weekday: "long",
        day: "numeric",
        month: "long",
        year: "numeric",
    };

    const optionsTime: Intl.DateTimeFormatOptions = {
        hour: "2-digit",
        minute: "2-digit",
        hour12: false,
    };

    const thDateFormatter = new Intl.DateTimeFormat("th-TH", optionsDate);
    const thTimeFormatter = new Intl.DateTimeFormat("th-TH", optionsTime);

    const parts = thDateFormatter.formatToParts(date);
    const time = thTimeFormatter.format(date);

    const dayOfWeek = parts.find(p => p.type === "weekday")?.value ?? "";
    const day = parts.find(p => p.type === "day")?.value ?? "";
    const month = parts.find(p => p.type === "month")?.value ?? "";
    const year = parts.find(p => p.type === "year")?.value ?? "";

    return {
        dayOfWeek,
        day,
        month,
        year,
        time
    };
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE
async function sendLineNotification(light: number, temp: number, humidity: number): Promise<void> {
    let lightStatus = "";
    let tempStatus = "";
    let humidityStatus = "";


    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ß‡πà‡∏≤‡∏á
    if (light > 65535) lightStatus = "‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î‡∏à‡πâ‡∏≤‡∏°‡∏≤‡∏Å‡πÜ üåû";
    else if (light > 60000) lightStatus = "‡πÅ‡∏™‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å ‚òÄÔ∏è";
    else if (light > 40000) lightStatus = "‡πÅ‡∏î‡∏î‡πÅ‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á üå§";
    else if (light > 30000) lightStatus = "‡πÅ‡∏î‡∏î‡∏≠‡πà‡∏≠‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏°‡∏µ‡πÄ‡∏°‡∏Ü üå•";
    else if (light > 20000) lightStatus = "‡∏ü‡πâ‡∏≤‡∏Ñ‡∏£‡∏∂‡πâ‡∏°‡πÉ‡∏Å‡∏•‡πâ‡∏ù‡∏ô üå¶";
    else if (light > 15000) lightStatus = "‡πÅ‡∏™‡∏á‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥‡πÄ‡∏¢‡∏≠‡∏∞‡πÉ‡∏ô‡∏£‡πà‡∏° üåà";
    else if (light > 10000) lightStatus = "‡πÅ‡∏™‡∏á‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≠‡∏î‡πÑ‡∏ü‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà üí°";
    else if (light > 7000) lightStatus = "‡πÅ‡∏™‡∏á‡πÉ‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏Å üí°";
    else if (light > 4000) lightStatus = "‡πÑ‡∏ü‡∏™‡∏ß‡πà‡∏≤‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ üí°";
    else if (light > 2000) lightStatus = "‡∏´‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÅ‡∏™‡∏á‡πÑ‡∏ü‡∏≠‡πà‡∏≠‡∏ô‡πÜ üåô";
    else if (light > 1000) lightStatus = "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏∑‡∏î‡∏•‡∏á üåå";
    else if (light > 500) lightStatus = "‡πÅ‡∏™‡∏á‡∏™‡∏•‡∏±‡∏ß üåë";
    else if (light > 100) lightStatus = "‡∏°‡∏∑‡∏î‡∏°‡∏≤‡∏Å ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡πà‡∏á‡∏°‡∏≠‡∏á üî¶";
    else if (light > 10) lightStatus = "‡∏°‡∏∑‡∏î‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡∏™‡∏ô‡∏¥‡∏ó üï≥Ô∏è";
    else lightStatus = "‡∏°‡∏∑‡∏î‡∏™‡∏ô‡∏¥‡∏ó ‚ö´";

    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥
    if (temp > 35) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å ‚ö†Ô∏è";
    else if (temp >= 30) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏£‡πâ‡∏≠‡∏ô üî•";
    else if (temp >= 25) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏≠‡∏∏‡πà‡∏ô‡πÜ üåû";
    else if (temp >= 20) tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥‡∏û‡∏≠‡∏î‡∏µ üå§";
    else tempStatus = "‡∏≠‡∏∏‡∏ì‡∏´‡∏π‡∏°‡∏¥‡πÄ‡∏¢‡πá‡∏ô ‚ùÑÔ∏è";

    // ‡πÅ‡∏õ‡∏•‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô
    if (humidity > 85) humidityStatus = " ‡∏ä‡∏∑‡πâ‡∏ô‡∏°‡∏≤‡∏Å ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡∏∂‡∏î‡∏≠‡∏±‡∏î ‡πÄ‡∏´‡∏á‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏£‡∏∞‡πÄ‡∏´‡∏¢ üåßÔ∏è ";
    else if (humidity > 70) humidityStatus = " ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏ä‡∏∑‡πâ‡∏ô ‡πÄ‡∏´‡∏ô‡∏µ‡∏¢‡∏ß‡∏ï‡∏±‡∏ß ‡∏£‡∏∞‡∏ö‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡πâ‡∏≠‡∏ô‡πÑ‡∏î‡πâ‡πÑ‡∏°‡πà‡∏î‡∏µ üí¶ ";
    else if (humidity > 60) humidityStatus = " ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πâ‡∏ô ‡∏≠‡∏≤‡∏à‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡∏≠‡∏ö‡∏≠‡πâ‡∏≤‡∏ß‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ üå´Ô∏è ";
    else if (humidity > 40) humidityStatus = " ‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏™‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‚úÖ ";
    else if (humidity > 30) humidityStatus = " ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡πÅ‡∏´‡πâ‡∏á ‡∏ú‡∏¥‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏´‡πâ‡∏á‡πÑ‡∏î‡πâ üí® ";
    else if (humidity > 20) humidityStatus = " ‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å ‡∏ú‡∏¥‡∏ß‡πÅ‡∏´‡πâ‡∏á ‡∏õ‡∏≤‡∏Å‡πÅ‡∏´‡πâ‡∏á ‡∏£‡∏∞‡∏Ñ‡∏≤‡∏¢‡∏à‡∏°‡∏π‡∏Å ü•µ ";
    else humidityStatus = "‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÅ‡∏´‡πâ‡∏á‡∏°‡∏≤‡∏Å üèúÔ∏è";

    const now = new Date();
    const thaiDate = getThaiDateParts(now);
    const fullDateTime = `${thaiDate.dayOfWeek}‡∏ó‡∏µ‡πà ${thaiDate.day} ${thaiDate.month} ‡∏û.‡∏®. ${thaiDate.year} `;

    const message = `‚ö† ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô! ‚ö†
üìÖ ‡∏ß‡∏±‡∏ô : ${fullDateTime}
‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤ ${thaiDate.time} ‡∏ô.
‚òÄ ‡πÅ‡∏™‡∏á‡πÅ‡∏î‡∏î : ${light}  lux  (${lightStatus})
üå° ‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥ : ${temp}  ¬∞C  (${tempStatus})
üíß ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏∑‡πâ‡∏ô : ${humidity} %  (${humidityStatus})`;

    try {
        const response = await axios.post(
            "https://api.line.me/v2/bot/message/push",
            {
                to: LINE_GROUP_ID,
                messages: [{ type: "text", text: message }],
            },
            {
                headers: { Authorization: `Bearer ${LINE_ACCESS_TOKEN}` },
            }
        );
        console.log("‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", response.data);
    } catch (error: unknown) {
        const axiosError = error as AxiosError;
        console.error("‚ùå ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", axiosError.response?.data || axiosError.message);
    }
}

let lastAlertTime = 0;
const ALERT_INTERVAL = 5 * 60 * 1000; // 5 ‡∏ô‡∏≤‡∏ó‡∏µ

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å 5 ‡∏ô‡∏≤‡∏ó‡∏µ
async function checkAndSendAlert() {
    const currentTime = new Date().getTime();
    if (currentTime - lastAlertTime >= ALERT_INTERVAL) {
        if (lastSensorData) {
            const { light, temp, humidity } = lastSensorData;
            await sendLineNotification(light, temp, humidity);
            lastAlertTime = currentTime;
        }
    }
}

setInterval(checkAndSendAlert, ALERT_INTERVAL);

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ESP8266
app.post("/sensor-data", async (req: Request, res: Response) => {
    const { light, temp, humidity }: { light: number; temp: number; humidity: number } = req.body;

    if (light !== undefined && temp !== undefined && humidity !== undefined) {
        lastSensorData = { light, temp, humidity };
        res.json({ message: "‚úÖ ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß!" });
    } else {
        res.status(400).json({ message: "‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }
});

// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
app.get("/latest", (req: Request, res: Response) => {
    if (lastSensorData) {
        res.json(lastSensorData);
    } else {
        res.status(404).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ã‡∏≠‡∏£‡πå" });
    }
});
// ‚úÖ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});
